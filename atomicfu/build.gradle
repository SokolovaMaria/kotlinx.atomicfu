apply plugin: 'kotlin-platform-jvm'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    expectedBy project(":atomicfu-common")

    testCompile project(":atomicfu-transformer")
    testCompile "junit:junit:$junit_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

def classesPreTransformDir = file("$buildDir/classes/kotlin/test")
def classesPostTransformDir = file("$buildDir/classes-post-transform/test")


task transformTestClasses(type: JavaExec, dependsOn: compileTestKotlin) {
    main = "kotlinx.atomicfu.transformer.AtomicFUTransformerKt"
    if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
        args = [classesPreTransformDir, classesPostTransformDir, "BOTH"]
    } else {
        args = [classesPreTransformDir, classesPostTransformDir, "FU"]
    }
    classpath = sourceSets.test.runtimeClasspath
    inputs.dir(classesPreTransformDir)
    outputs.dir(classesPostTransformDir)
}

task transformedTest(type: Test, dependsOn: transformTestClasses) {
    classpath = files(configurations.testRuntime, "$buildDir/classes-post-transform/test/fu")
    exclude '**/*LFTest.*'
}

task testComlicated(type: Test, dependsOn: transformTestClasses) {
    classpath = files(configurations.testRuntime, "$buildDir/classes-post-transform/test/vh")
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        events "passed", "failed"
    }
}

test.dependsOn transformedTest

